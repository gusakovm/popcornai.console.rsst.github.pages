function CheckinsDataContent({ reports, onLoadMore, isLoading }) { const formatDate = (dateString) => { const date = new Date(dateString); return new Intl.DateTimeFormat('ru-RU', { day: '2-digit', month: 'long', year: 'numeric' }).format(date); }; const calculateCompletionPercentage = (fact, plan) => { if (!plan || plan === 0) return 0; return Math.round((fact / plan) * 100); }; const styles = { container: { padding: '20px' }, cardGrid: { display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: '16px', marginBottom: '30px' }, card: { backgroundColor: '#fff', borderRadius: '8px', border: '1px solid #e0e0e0', padding: '12px', display: 'flex', flexDirection: 'column', height: '100%', boxSizing: 'border-box' }, cardHeader: { marginBottom: '8px' }, date: { fontSize: '12px', color: '#666', marginBottom: '6px' }, name: { fontSize: '16px', fontWeight: 600, color: '#333', marginTop: 0, marginBottom: '6px' }, district: { fontSize: '14px', color: '#555', marginBottom: '8px' }, section: { marginBottom: '8px' }, sectionTitle: { fontSize: '12px', fontWeight: 600, color: '#666', marginBottom: '2px' }, sectionContent: { fontSize: '13px', color: '#333', lineHeight: '1.3' }, planCompletion: { display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '12px' }, planText: { fontSize: '13px', color: '#333' }, incident: { color: '#cf1322', fontWeight: 500 }, noIncident: { color: '#52c41a', fontWeight: 500 }, divider: { borderBottom: '1px solid #f0f0f0', margin: '8px 0' }, button: { backgroundColor: '#0066cc', color: '#fff', border: 'none', borderRadius: '4px', padding: '12px 20px', fontSize: '16px', fontWeight: 500, cursor: 'pointer', marginTop: '20px', opacity: 1, transition: 'opacity 0.2s ease', display: 'block', margin: '0 auto', width: 'fit-content' }, buttonDisabled: { opacity: 0.5, cursor: 'not-allowed' }, emptyState: { textAlign: 'center', padding: '40px 20px', backgroundColor: '#f9f9f9', borderRadius: '8px', border: '1px solid #e0e0e0' }, emptyStateText: { fontSize: '16px', color: '#666' } }; if (!reports || reports.length === 0) { return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.emptyState }, React.createElement('p', { style: styles.emptyStateText }, isLoading ? 'Загрузка отчетов...' : 'Отчеты не найдены') ) ); } return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.cardGrid }, reports.map(report => React.createElement('div', { key: report.id, style: styles.card }, React.createElement('div', { style: styles.cardHeader }, React.createElement('div', { style: styles.date }, formatDate(report.date) ), React.createElement('h3', { style: styles.name }, report.fio ), React.createElement('div', { style: styles.district }, `Район: ${report.district}` ) ), React.createElement('div', { style: styles.planCompletion }, React.createElement('span', { style: styles.sectionTitle }, 'Выполнение плана:' ), React.createElement('span', { style: styles.planText }, `${report.fact}/${report.plan} (${calculateCompletionPercentage(report.fact, report.plan)}%)` ) ), React.createElement('div', { style: styles.section }, React.createElement('div', { style: styles.sectionTitle }, 'Найдено проблем:' ), React.createElement('div', { style: styles.sectionContent }, report.faults_count ) ), React.createElement('div', { style: styles.section }, React.createElement('div', { style: styles.sectionTitle }, 'Инциденты:' ), React.createElement('div', { style: { ...styles.sectionContent, ...(report.is_incident ? styles.incident : styles.noIncident) } }, report.is_incident ? (report.incident_description || 'Зафиксирован инцидент') : 'Нет инцидентов' ) ), React.createElement('div', { style: styles.divider }), React.createElement('div', { style: styles.section }, React.createElement('div', { style: styles.sectionTitle }, 'Техническое состояние:' ), React.createElement('div', { style: styles.sectionContent }, report.tech_conditions ) ), React.createElement('div', { style: styles.section }, React.createElement('div', { style: styles.sectionTitle }, 'AI итог:' ), React.createElement('div', { style: styles.sectionContent }, report.summary ) ) ) ) ), React.createElement('button', { style: { ...styles.button, ...(isLoading ? styles.buttonDisabled : {}) }, disabled: isLoading, onClick: onLoadMore }, isLoading ? 'Загрузка...' : 'Загрузить еще') );
}
function CheckinsData() { const styles = { container: { display: 'flex', flexDirection: 'column', minHeight: '100vh' }, content: { flex: 1 }, errorContainer: { padding: '20px', backgroundColor: '#fff1f0', borderRadius: '8px', border: '1px solid #ffccc7', marginTop: '20px' }, errorTitle: { color: '#cf1322', fontSize: '18px', fontWeight: 600, marginTop: 0, marginBottom: '10px' }, errorMessage: { color: '#333', fontSize: '16px', lineHeight: '1.5', margin: 0 }, pageTitle: { fontSize: '24px', fontWeight: 600, color: '#333', margin: '20px', marginBottom: '10px' }, pageDescription: { fontSize: '16px', color: '#666', margin: '0 20px 20px 20px' } }; const [reports, setReports] = React.useState([]); const [currentPage, setCurrentPage] = React.useState(0); const [error, setError] = React.useState(null); const [loading, setLoading] = React.useState(false); const [allDataLoaded, setAllDataLoaded] = React.useState(false); const fetchReportsData = async (page = 0) => { try { setLoading(true); setError(null); const response = await n8nFetch(`checkins/electr-table?page=${page}`); const data = await response.json(); if (Array.isArray(data) && data.length > 0) { if (page === 0) { setReports(data); } else { setReports(prevReports => [...prevReports, ...data]); } setCurrentPage(page); } else { setAllDataLoaded(true); if (page === 0) { setReports([]); } } } catch (err) { console.error('Ошибка при загрузке отчетов:', err); setError(err.message || 'Произошла ошибка при загрузке отчетов'); } finally { setLoading(false); } }; React.useEffect(() => { fetchReportsData(0); }, []); const handleLoadMore = () => { if (!loading && !allDataLoaded) { fetchReportsData(currentPage + 1); } }; if (error) { return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.errorContainer }, React.createElement('h2', { style: styles.errorTitle }, 'Ошибка загрузки отчетов'), React.createElement('p', { style: styles.errorMessage }, error) ) ); } return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.content }, React.createElement(CheckinsDataContent, { reports: reports, onLoadMore: handleLoadMore, isLoading: loading }) ) );
}
const exportedComponent = CheckinsData;
  
return exportedComponent;