import { n8nFetch } from '../../lib/n8n';
function VodokanalUsageAnalytics() { const [users, setUsers] = React.useState([]); const [userRequests, setUserRequests] = React.useState([]); const [selectedUser, setSelectedUser] = React.useState(null); const [error, setError] = React.useState(null); const [loading, setLoading] = React.useState(false); const [currentPage, setCurrentPage] = React.useState(1); const [hasMoreData, setHasMoreData] = React.useState(true); const fetchUsersList = async () => { try { setLoading(true); setError(null); const response = await n8nFetch('vodokanal/getUsageUsers'); const responseData = await response.json(); if (Array.isArray(responseData)) { const transformedUsers = responseData.map(user => ({ email: user.user_email, last_request_date: user.last_query_at, total_requests: user.total_queries })); setUsers(transformedUsers); console.log('Получены данные пользователей:', transformedUsers); } else { console.log('Неожиданный формат данных пользователей:', responseData); setUsers([]); } } catch (err) { console.error('Ошибка при загрузке списка пользователей:', err); setError(err.message || 'Произошла ошибка при загрузке списка пользователей'); } finally { setLoading(false); } }; const fetchUserRequests = async (userEmail, page = 1, append = false) => { try { setLoading(true); setError(null); const response = await n8nFetch(`vodokanal/getUsageByUser?email=${encodeURIComponent(userEmail)}&page=${page}`); const responseData = await response.json(); if (Array.isArray(responseData)) { const newData = responseData; console.log(`Получены запросы пользователя ${userEmail} (стр.${page}):`, responseData); if (newData.length === 0 || newData.length < 10) { setHasMoreData(false); } else { setHasMoreData(true); } if (append && newData.length > 0) { setUserRequests(prevData => [...prevData, ...newData]); } else { setUserRequests(newData); setCurrentPage(1); } } else { console.log(`Пустой ответ для пользователя ${userEmail}`); setUserRequests([]); } } catch (err) { console.error(`Ошибка при загрузке запросов пользователя ${userEmail}:`, err); setError(err.message || `Произошла ошибка при загрузке запросов пользователя ${userEmail}`); } finally { setLoading(false); } }; React.useEffect(() => { fetchUsersList(); }, []); const handleViewUser = async (userEmail) => { console.log(`Просмотр запросов пользователя: ${userEmail}`); setSelectedUser(userEmail); await fetchUserRequests(userEmail); }; const handleBackToList = () => { setSelectedUser(null); setUserRequests([]); setCurrentPage(1); setHasMoreData(true); }; const handleLoadMore = async () => { if (selectedUser && !loading && hasMoreData) { const nextPage = currentPage + 1; setCurrentPage(nextPage); await fetchUserRequests(selectedUser, nextPage, true); } }; if (error) { return React.createElement('div', { style: { padding: '20px' } }, React.createElement('h1', { style: { fontSize: '24px', fontWeight: 600, color: '#333', marginBottom: '20px' } }, 'Аналитика использования системы'), React.createElement('div', { style: { padding: '20px', backgroundColor: '#fff1f0', borderRadius: '8px', border: '1px solid #ffccc7' } }, React.createElement('h2', { style: { color: '#cf1322', fontSize: '18px', fontWeight: 600, marginTop: 0, marginBottom: '10px' } }, 'Ошибка загрузки данных'), React.createElement('p', { style: { color: '#333', fontSize: '16px', lineHeight: '1.5', margin: 0 } }, error) ) ); } return VodokanalUsageAnalyticsContent({ users, userRequests, selectedUser, onViewUser: handleViewUser, onBackToList: handleBackToList, onLoadMore: handleLoadMore, hasMoreData, isLoading: loading });
}
function VodokanalUsageAnalyticsContent({ users, userRequests, selectedUser, onViewUser, onBackToList, onLoadMore, hasMoreData, isLoading }) { const styles = { container: { padding: '20px' }, header: { display: 'flex', alignItems: 'center', marginBottom: '20px' }, title: { fontSize: '24px', fontWeight: 600, color: '#333', margin: 0 }, subtitle: { fontSize: '16px', color: '#666', marginTop: '8px', marginBottom: '20px' }, tableContainer: { backgroundColor: '#fff', borderRadius: '8px', border: '1px solid #e0e0e0', overflow: 'hidden' }, table: { width: '100%', borderCollapse: 'collapse' }, tableHeader: { backgroundColor: '#f5f5f5', borderBottom: '1px solid #e0e0e0' }, tableHeaderCell: { padding: '10px 12px', textAlign: 'left', fontSize: '13px', fontWeight: 600, color: '#333' }, tableRow: { borderBottom: '1px solid #e0e0e0' }, tableRowAlternate: { backgroundColor: '#f9f9f9', borderBottom: '1px solid #e0e0e0' }, tableCell: { padding: '8px 12px', fontSize: '13px', color: '#333' }, buttonContainer: { display: 'flex', justifyContent: 'flex-end', padding: '12px 16px' }, iconText: { display: 'flex', alignItems: 'center', gap: '8px' }, backButton: { marginRight: '16px' }, loadingContainer: { textAlign: 'center', padding: '40px 20px', backgroundColor: '#f9f9f9', borderRadius: '8px', border: '1px solid #e0e0e0' }, loadingText: { fontSize: '16px', color: '#666' }, emptyState: { textAlign: 'center', padding: '40px 20px', backgroundColor: '#f9f9f9', borderRadius: '8px', border: '1px solid #e0e0e0' }, emptyStateText: { fontSize: '16px', color: '#666' }, button: { backgroundColor: '#0066cc', color: '#fff', border: 'none', borderRadius: '4px', padding: '8px 16px', fontSize: '14px', fontWeight: 500, cursor: 'pointer', opacity: 1, transition: 'opacity 0.2s ease' } }; if (isLoading) { return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.loadingContainer }, React.createElement('p', { style: styles.loadingText }, 'Загрузка данных...') ) ); } if (selectedUser) { if (!userRequests || userRequests.length === 0) { return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.header }, React.createElement('button', { style: { ...styles.button, ...styles.backButton }, onClick: onBackToList }, '← Назад к списку пользователей'), React.createElement('h2', { style: styles.title }, `Запросы пользователя: ${selectedUser}`) ), React.createElement('div', { style: styles.emptyState }, React.createElement('p', { style: styles.emptyStateText }, 'У пользователя нет запросов') ) ); } const columns = Object.keys(userRequests[0]); return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.header }, React.createElement('button', { style: { ...styles.button, ...styles.backButton }, onClick: onBackToList }, '← Назад к списку пользователей'), React.createElement('h2', { style: styles.title }, `Запросы пользователя: ${selectedUser}`) ), React.createElement('p', { style: styles.subtitle }, `Всего запросов: ${userRequests.length}`), React.createElement('div', { style: styles.tableContainer }, React.createElement('table', { style: styles.table }, React.createElement('thead', { style: styles.tableHeader }, React.createElement('tr', null, columns.map(column => React.createElement('th', { key: column, style: styles.tableHeaderCell }, column) ) ) ), React.createElement('tbody', null, userRequests.map((row, rowIndex) => React.createElement('tr', { key: rowIndex, style: rowIndex % 2 === 0 ? styles.tableRow : styles.tableRowAlternate }, columns.map(column => React.createElement('td', { key: `${rowIndex}-${column}`, style: styles.tableCell }, formatCellValue(row[column])) ) ) ) ) ), hasMoreData && React.createElement('div', { style: { textAlign: 'center', padding: '16px' } }, React.createElement('button', { onClick: onLoadMore, style: styles.button, disabled: isLoading }, isLoading ? 'Загрузка...' : 'Загрузить ещё') ) ) ); } if (!users || users.length === 0) { return React.createElement('div', { style: styles.container }, React.createElement('h2', { style: styles.title }, 'Аналитика использования системы'), React.createElement('div', { style: styles.emptyState }, React.createElement('p', { style: styles.emptyStateText }, 'Пользователи не найдены') ) ); } return React.createElement('div', { style: styles.container }, React.createElement('h2', { style: styles.title }, 'Аналитика использования системы'), React.createElement('p', { style: styles.subtitle }, 'Выберите пользователя для просмотра его запросов'), React.createElement('div', { style: styles.tableContainer }, React.createElement('table', { style: styles.table }, React.createElement('thead', { style: styles.tableHeader }, React.createElement('tr', null, React.createElement('th', { style: styles.tableHeaderCell }, 'Email пользователя'), React.createElement('th', { style: styles.tableHeaderCell }, 'Дата последнего запроса'), React.createElement('th', { style: styles.tableHeaderCell }, 'Общее количество запросов'), React.createElement('th', { style: styles.tableHeaderCell }) ) ), React.createElement('tbody', null, users.map((user, index) => React.createElement('tr', { key: user.email || index, style: index % 2 === 0 ? styles.tableRow : styles.tableRowAlternate }, React.createElement('td', { style: styles.tableCell }, user.email), React.createElement('td', { style: styles.tableCell }, formatCellValue(user.last_request_date)), React.createElement('td', { style: styles.tableCell }, user.total_requests || user.request_count || 0), React.createElement('td', { style: styles.tableCell }, React.createElement('div', { style: styles.buttonContainer }, React.createElement('button', { style: styles.button, onClick: () => onViewUser(user.email) }, 'Просмотреть') ) ) ) ) ) ) ) );
}
function formatCellValue(value) { if (value === null || value === undefined) { return '—'; } if (isValidISODate(value)) { return formatDate(value); } if (typeof value === 'boolean') { return value ? 'Да' : 'Нет'; } if (typeof value === 'object') { try { return JSON.stringify(value); } catch (e) { return String(value); } } return String(value);
}
function isValidISODate(dateString) { if (typeof dateString !== 'string') { return false; } const isoDatePattern = /^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[+-]\d{2}:\d{2})?)?$/; if (!isoDatePattern.test(dateString)) { return false; } const date = new Date(dateString); return !isNaN(date.getTime());
}
function formatDate(dateString) { const date = new Date(dateString); return new Intl.DateTimeFormat('ru-RU', { day: '2-digit', month: 'long', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' }).format(date);
}
const exportedComponent = VodokanalUsageAnalytics;
  
return exportedComponent;