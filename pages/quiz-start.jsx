function QuizStartContent({ quiz, selectedAnswers, onAnswerSelect }) { const [submitting, setSubmitting] = React.useState(false); const handleSubmitResults = async () => { if (!quiz || !quiz.id) return; try { setSubmitting(true); const resultsData = { quiz_id: quiz.id, answers: Object.entries(selectedAnswers).map(([questionIndex, answerIndex]) => { const questionNumber = quiz.questions[questionIndex].number; const answerNumber = quiz.questions[questionIndex].answers[answerIndex].number; return { question_number: questionNumber, answer_number: answerNumber }; }) }; const response = await n8nFetch('quiz/result', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(resultsData) }); const data = await response.json(); if (data && data.redirect_url) { window.location.href = data.redirect_url; } else { throw new Error('Не получен URL для перенаправления'); } } catch (error) { console.error('Ошибка при отправке результатов:', error); alert('Произошла ошибка при отправке результатов. Пожалуйста, попробуйте еще раз.'); } finally { setSubmitting(false); } }; const styles = { container: { marginTop: 20, backgroundColor: '#fff', borderRadius: '8px', border: '1px solid #e0e0e0', padding: '20px', marginBottom: '20px' }, title: { fontSize: '24px', fontWeight: 600, color: '#333', marginTop: 0, marginBottom: '15px' }, description: { fontSize: '16px', lineHeight: '1.5', color: '#333', marginBottom: '30px' }, questionContainer: { marginBottom: '30px', padding: '15px', backgroundColor: '#f9f9f9', borderRadius: '6px', border: '1px solid #e0e0e0' }, questionTitle: { fontSize: '18px', fontWeight: 600, color: '#333', marginTop: 0, marginBottom: '15px' }, answersList: { margin: '0', padding: '0', listStyle: 'none' }, answerItem: { margin: '10px 0', padding: '10px 15px', backgroundColor: '#fff', borderRadius: '4px', border: '1px solid #e0e0e0', cursor: 'pointer', transition: 'all 0.2s ease' }, answerItemSelected: { backgroundColor: '#e6f7ff', borderColor: '#1890ff' }, button: { backgroundColor: '#0066cc', color: '#fff', border: 'none', borderRadius: '4px', padding: '12px 20px', fontSize: '16px', fontWeight: 500, cursor: 'pointer', marginTop: '20px', opacity: 1, transition: 'opacity 0.2s ease' }, buttonDisabled: { opacity: 0.5, cursor: 'not-allowed' }, radioContainer: { display: 'flex', alignItems: 'center', gap: '10px' }, radio: { width: '18px', height: '18px', accentColor: '#0066cc' }, answerText: { fontSize: '16px', lineHeight: '1.5', color: '#333', flex: 1 } }; const allQuestionsAnswered = quiz && quiz.questions && quiz.questions.every((question, index) => selectedAnswers[index] !== undefined); if (!quiz) { return React.createElement('div', { style: styles.container }, React.createElement('p', null, 'Загрузка квиза...') ); } return React.createElement('div', null, React.createElement('div', { style: styles.container }, React.createElement('h1', { style: styles.title }, quiz.title), React.createElement('p', { style: styles.description }, quiz.description), quiz.questions.map((question, questionIndex) => React.createElement('div', { key: questionIndex, style: styles.questionContainer }, React.createElement('h2', { style: styles.questionTitle }, question.text), React.createElement('ul', { style: styles.answersList }, question.answers.map((answer, answerIndex) => { const isSelected = selectedAnswers[questionIndex] === answerIndex; return React.createElement('li', { key: answerIndex, style: { ...styles.answerItem, ...(isSelected ? styles.answerItemSelected : {}) }, onClick: () => onAnswerSelect(questionIndex, answerIndex) }, React.createElement('div', { style: styles.radioContainer }, React.createElement('input', { type: 'radio', name: `question-${questionIndex}`, checked: isSelected, onChange: () => onAnswerSelect(questionIndex, answerIndex), style: styles.radio }), React.createElement('span', { style: styles.answerText }, answer.text) ) ); }) ) ) ), React.createElement('button', { style: { ...styles.button, ...(allQuestionsAnswered ? {} : styles.buttonDisabled), ...(submitting ? { opacity: 0.7, cursor: 'wait' } : {}) }, disabled: !allQuestionsAnswered || submitting, onClick: handleSubmitResults }, submitting ? 'Отправка...' : 'Перейти к результату') ) );
}
function QuizStart() { const styles = { container: { display: 'flex', flexDirection: 'column', minHeight: '100vh' }, content: { flex: 1 }, errorContainer: { padding: '20px', backgroundColor: '#fff1f0', borderRadius: '8px', border: '1px solid #ffccc7', marginTop: '20px' }, errorTitle: { color: '#cf1322', fontSize: '18px', fontWeight: 600, marginTop: 0, marginBottom: '10px' }, errorMessage: { color: '#333', fontSize: '16px', lineHeight: '1.5', margin: 0 } }; const [quiz, setQuiz] = React.useState(null); const [selectedAnswers, setSelectedAnswers] = React.useState({}); const [error, setError] = React.useState(null); const [loading, setLoading] = React.useState(false); const [quizStarted, setQuizStarted] = React.useState(false); const [urlParams] = React.useState(() => { try { const hashParams = window.location.hash.split('?')[1] || ''; const params = {}; new URLSearchParams(hashParams).forEach((value, key) => { params[key] = value; }); return params; } catch (error) { console.error('Ошибка при парсинге URL-параметров:', error); return {}; } }); const fetchQuizData = async () => { try { setLoading(true); setError(null); const response = await n8nFetch('quiz/create'); const data = await response.json(); setQuiz(data); setQuizStarted(true); } catch (err) { console.error('Ошибка при загрузке квиза:', err); setError(err.message || 'Произошла ошибка при загрузке квиза'); } finally { setLoading(false); } }; const handleStartQuiz = () => { fetchQuizData(); }; const handleAnswerSelect = (questionIndex, answerIndex) => { setSelectedAnswers(prev => ({ ...prev, [questionIndex]: answerIndex })); }; if (error) { return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.errorContainer }, React.createElement('h2', { style: styles.errorTitle }, 'Ошибка загрузки квиза'), React.createElement('p', { style: styles.errorMessage }, error) ) ); } const startButtonStyles = { button: { backgroundColor: '#0066cc', color: '#fff', border: 'none', borderRadius: '4px', padding: '12px 20px', fontSize: '16px', fontWeight: 500, cursor: 'pointer', marginTop: '20px', opacity: 1, transition: 'opacity 0.2s ease', display: 'block', margin: '100px auto' }, container: { textAlign: 'center', padding: '50px', backgroundColor: '#fff', borderRadius: '8px', border: '1px solid #e0e0e0', maxWidth: '600px', margin: '50px auto' }, title: { fontSize: '24px', fontWeight: 600, color: '#333', marginBottom: '20px' } }; return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.content }, !quizStarted ? ( React.createElement('div', { style: startButtonStyles.container }, React.createElement('h1', { style: startButtonStyles.title }, 'Добро пожаловать в квиз!'), React.createElement('button', { style: startButtonStyles.button, onClick: handleStartQuiz, disabled: loading }, loading ? 'Загрузка...' : 'Начать квиз') ) ) : ( React.createElement(QuizStartContent, { quiz: quiz, selectedAnswers: selectedAnswers, onAnswerSelect: handleAnswerSelect }) ) ) );
}
const exportedComponent = QuizStart;
  
return exportedComponent;